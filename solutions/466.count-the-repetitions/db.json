{"java":"class Solution {\n    public int getMaxRepetitions(String s1, int n1, String s2, int n2) {\n        if(n1==0) return 0;\n        char[] c1 = s1.toCharArray();\n        char[] c2 = s2.toCharArray();\n        int l1 = s1.length();\n        int l2 = s2.length();\n        int couts1=0;//经历多少s1\n        int couts2=0;//经历多少s2\n        int p=0;//当前在s2的位置\n        Map<Integer,int[]> mp = new HashMap<>();//记录每一次s1扫描结束后当前的状态，寻找循环\n        while(couts1<n1){\n            for(int i=0;i<l1;i++){\n                if(c1[i]==c2[p]){//往前\n                    p++;\n                    if(p==l2){//s2扫描结束从头开始循环\n                        p=0;\n                        couts2++;\n                    }\n                }\n            }\n            couts1++;\n            if(!mp.containsKey(p)){\n                mp.put(p,new int[]{couts1,couts2});//记录当前状态\n                \n            }\n            else{//出现了循环 这次结束后p的位置和以前某一次一样，就是循环\n                int[] last =mp.get(p);\n                int circle1= couts1-last[0];\n                int circle2= couts2-last[1];\n                couts2 += circle2*((n1-couts1)/circle1);\n                couts1 = couts1+((n1-couts1)/circle1)*circle1;//更新新他们\n            }\n        }\n        return couts2/n2;\n    }\n}\n"}