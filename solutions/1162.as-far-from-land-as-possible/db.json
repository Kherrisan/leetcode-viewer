{"java":"class Solution {\n    public int maxDistance(int[][] grid) {\n        int M=grid.length;int N=grid[0].length;\n        Queue<Integer> queue = new LinkedList();\n        int[] dx=new int[]{1,0,0,-1};\n        int[] dy=new int[]{0,1,-1,0};\n        for(int i=0;i<M;i++){\n            for(int j=0;j<N;j++){\n                if(grid[i][j]==1){\n                    queue.offer(i);\n                    queue.offer(j);\n                }\n            }\n        }\n        int last=0;\n        boolean hasOcean=false;\n        while(!queue.isEmpty()){\n            int x=queue.poll();\n            int y=queue.poll();\n            for(int i=0;i<4;i++){\n                int newX=dx[i]+x;\n                int newY=dy[i]+y;\n                if(newX<0||newX>=M||newY<0||newY>=N||grid[newX][newY]!=0){\n                    continue;\n                }\n                grid[newX][newY]=grid[x][y]+1;\n                last=grid[newX][newY];\n                hasOcean=true;\n                queue.offer(newX);\n                queue.offer(newY);\n            }\n        }\n        return hasOcean?last-1:-1;\n    }\n}"}