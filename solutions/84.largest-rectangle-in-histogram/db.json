{"java":"class Solution {\n    public int largestRectangleArea(int[] heights) {\n        int n = heights.length;\n        int[] left = new int[n];\n        int[] right = new int[n];\n        \n        Stack<Integer> mono_stack = new Stack<Integer>();\n        for (int i = 0; i < n; ++i) {\n            while (!mono_stack.isEmpty() && heights[mono_stack.peek()] >= heights[i]) {\n                mono_stack.pop();\n            }\n            left[i] = (mono_stack.isEmpty() ? -1 : mono_stack.peek());\n            mono_stack.push(i);\n        }\n\n        mono_stack.clear();\n        for (int i = n - 1; i >= 0; --i) {\n            while (!mono_stack.isEmpty() && heights[mono_stack.peek()] >= heights[i]) {\n                mono_stack.pop();\n            }\n            right[i] = (mono_stack.isEmpty() ? n : mono_stack.peek());\n            mono_stack.push(i);\n        }\n        \n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            ans = Math.max(ans, (right[i] - left[i] - 1) * heights[i]);\n        }\n        return ans;\n    }\n}\n"}