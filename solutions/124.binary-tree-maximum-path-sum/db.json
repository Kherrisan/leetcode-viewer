{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    int maxSum = Integer.MIN_VALUE;\n\n    public int maxPathSum(TreeNode root) {\n        maxGain(root);\n        return maxSum;\n    }\n\n    public int maxGain(TreeNode node) {\n        if (node == null) {\n            return 0;\n        }\n        \n        // 递归计算左右子节点的最大贡献值\n        // 只有在最大贡献值大于 0 时，才会选取对应子节点\n        int leftGain = Math.max(maxGain(node.left), 0);\n        int rightGain = Math.max(maxGain(node.right), 0);\n\n        // 节点的最大路径和取决于该节点的值与该节点的左右子节点的最大贡献值\n        int priceNewpath = node.val + leftGain + rightGain;\n\n        // 更新答案\n        maxSum = Math.max(maxSum, priceNewpath);\n\n        // 返回节点的最大贡献值\n        return node.val + Math.max(leftGain, rightGain);\n    }\n\n}"}