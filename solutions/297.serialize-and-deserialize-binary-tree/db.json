{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\npublic class Codec {\n\n    public String rserialize(TreeNode root, String str) {\n        if (root == null) {\n            str += \"None,\";\n        } else {\n            str += str.valueOf(root.val) + \",\";\n            str = rserialize(root.left, str);\n            str = rserialize(root.right, str);\n        }\n        return str;\n    }\n  \n    public String serialize(TreeNode root) {\n        return rserialize(root, \"\");\n    }\n  \n    public TreeNode rdeserialize(List<String> l) {\n        if (l.get(0).equals(\"None\")) {\n            l.remove(0);\n            return null;\n        }\n  \n        TreeNode root = new TreeNode(Integer.valueOf(l.get(0)));\n        l.remove(0);\n        root.left = rdeserialize(l);\n        root.right = rdeserialize(l);\n    \n        return root;\n    }\n  \n    public TreeNode deserialize(String data) {\n        String[] data_array = data.split(\",\");\n        List<String> data_list = new LinkedList<String>(Arrays.asList(data_array));\n        return rdeserialize(data_list);\n    }\n}\n\n// Your Codec object will be instantiated and called as such:\n// Codec codec = new Codec();\n// codec.deserialize(codec.serialize(root));"}