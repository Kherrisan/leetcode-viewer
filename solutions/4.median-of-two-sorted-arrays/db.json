{"java":"class Solution {\n    public double findMedianSortedArrays(int[] nums1, int[] nums2) {\n        int length1 = nums1.length, length2 = nums2.length;\n        int totalLength = length1 + length2;\n        if (totalLength % 2 == 1) {\n            int midIndex = totalLength / 2;\n            double median = getKthElement(nums1, nums2, midIndex + 1);\n            return median;\n        } else {\n            int midIndex1 = totalLength / 2 - 1, midIndex2 = totalLength / 2;\n            double median = (getKthElement(nums1, nums2, midIndex1 + 1) + getKthElement(nums1, nums2, midIndex2 + 1)) / 2.0;\n            return median;\n        }\n    }\n\n    public int getKthElement(int[] nums1, int[] nums2, int k) {\n        /* 主要思路：要找到第 k (k>1) 小的元素，那么就取 pivot1 = nums1[k/2-1] 和 pivot2 = nums2[k/2-1] 进行比较\n         * 这里的 \"/\" 表示整除\n         * nums1 中小于等于 pivot1 的元素有 nums1[0 .. k/2-2] 共计 k/2-1 个\n         * nums2 中小于等于 pivot2 的元素有 nums2[0 .. k/2-2] 共计 k/2-1 个\n         * 取 pivot = min(pivot1, pivot2)，两个数组中小于等于 pivot 的元素共计不会超过 (k/2-1) + (k/2-1) <= k-2 个\n         * 这样 pivot 本身最大也只能是第 k-1 小的元素\n         * 如果 pivot = pivot1，那么 nums1[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 \"删除\"，剩下的作为新的 nums1 数组\n         * 如果 pivot = pivot2，那么 nums2[0 .. k/2-1] 都不可能是第 k 小的元素。把这些元素全部 \"删除\"，剩下的作为新的 nums2 数组\n         * 由于我们 \"删除\" 了一些元素（这些元素都比第 k 小的元素要小），因此需要修改 k 的值，减去删除的数的个数\n         */\n\n        int length1 = nums1.length, length2 = nums2.length;\n        int index1 = 0, index2 = 0;\n        int kthElement = 0;\n\n        while (true) {\n            // 边界情况\n            if (index1 == length1) {\n                return nums2[index2 + k - 1];\n            }\n            if (index2 == length2) {\n                return nums1[index1 + k - 1];\n            }\n            if (k == 1) {\n                return Math.min(nums1[index1], nums2[index2]);\n            }\n            \n            // 正常情况\n            int half = k / 2;\n            int newIndex1 = Math.min(index1 + half, length1) - 1;\n            int newIndex2 = Math.min(index2 + half, length2) - 1;\n            int pivot1 = nums1[newIndex1], pivot2 = nums2[newIndex2];\n            if (pivot1 <= pivot2) {\n                k -= (newIndex1 - index1 + 1);\n                index1 = newIndex1 + 1;\n            } else {\n                k -= (newIndex2 - index2 + 1);\n                index2 = newIndex2 + 1;\n            }\n        }\n    }\n}"}