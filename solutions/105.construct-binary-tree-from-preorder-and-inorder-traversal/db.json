{"java":"/**\n * Definition for a binary tree node.\n * public class TreeNode {\n *     int val;\n *     TreeNode left;\n *     TreeNode right;\n *     TreeNode(int x) { val = x; }\n * }\n */\nclass Solution {\n    private Map<Integer,Integer> map=new HashMap();\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        int N=preorder.length;\n        for(int i=0;i<N;i++){\n            map.put(inorder[i],i);\n        }\n        return buildTree(preorder,inorder,0,N-1,0,N-1);\n    }\n\n    TreeNode buildTree(int[] preorder,int[] inorder,int preorder_left,int preorder_right,int inorder_left,int inorder_right){\n        if(preorder_left>preorder_right){\n            return null;\n        }\n        int root_val=preorder[preorder_left];\n        int inorder_root = map.get(root_val);\n        int sizeOfLeftSub=inorder_root-inorder_left;\n        TreeNode node=new TreeNode(root_val);\n        node.left=buildTree(preorder,inorder,preorder_left+1,preorder_left+sizeOfLeftSub,inorder_left,inorder_root-1);\n        node.right=buildTree(preorder,inorder,preorder_left+sizeOfLeftSub+1,preorder_right,inorder_root+1,inorder_right);\n        return node;\n    }\n}"}