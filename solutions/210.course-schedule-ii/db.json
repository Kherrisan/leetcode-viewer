{"java":"class Solution {\n   public int[] findOrder(int numCourses, int[][] prerequisites) {\n        edges = new ArrayList<>(numCourses);\n        for (int i = 0; i < numCourses; i++) {\n            edges.add(new ArrayList<>());\n        }\n        for (int[] pre : prerequisites) {\n            edges.get(pre[1]).add(pre[0]);\n        }\n\n        res = new int[numCourses];\n        index = numCourses - 1;\n        visited = new int[numCourses];\n\n        for (int i = 0; i < edges.size(); i++) {\n            if (visited[i] == 0) {\n                dfs(i);\n            }\n        }\n\n        if (invalid) {\n            return new int[0];\n        }\n        return res;\n    }\n\n\n    List<List<Integer>> edges;\n    int[] visited;\n    boolean invalid = false;\n    int[] res;\n    int index;\n\n    public void dfs(int u) {\n        visited[u] = 1;\n        for (int v : edges.get(u)) {\n            if (visited[v] == 0) {\n                dfs(v);\n                if (invalid) {\n                    return;\n                }\n            } else if (visited[v] == 1) {\n                invalid = true;\n            }\n        }\n\n        visited[u] = 2;\n        res[index--] = u;\n    }\n}\n"}