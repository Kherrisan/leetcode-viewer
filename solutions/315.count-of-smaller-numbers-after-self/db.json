{"java":"class Solution {\n    private int[] c;\n    private int[] a;\n\n    public List<Integer> countSmaller(int[] nums) {\n        List<Integer> resultList = new ArrayList<Integer>(); \n        discretization(nums);\n        init(nums.length + 5);\n        for (int i = nums.length - 1; i >= 0; --i) {\n            int id = getId(nums[i]);\n            resultList.add(query(id - 1));\n            update(id);\n        }\n        Collections.reverse(resultList);\n        return resultList;\n    }\n\n    private void init(int length) {\n        c = new int[length];\n        Arrays.fill(c, 0);\n    }\n\n    private int lowBit(int x) {\n        return x & (-x);\n    }\n\n    private void update(int pos) {\n        while (pos < c.length) {\n            c[pos] += 1;\n            pos += lowBit(pos);\n        }\n    }\n\n    private int query(int pos) {\n        int ret = 0;\n        while (pos > 0) {\n            ret += c[pos];\n            pos -= lowBit(pos);\n        }\n\n        return ret;\n    }\n\n    private void discretization(int[] nums) {\n        Set<Integer> set = new HashSet<Integer>();\n        for (int num : nums) {\n            set.add(num);\n        }\n        int size = set.size();\n        a = new int[size];\n        int index = 0;\n        for (int num : set) {\n            a[index++] = num;\n        }\n        Arrays.sort(a);\n    }\n\n    private int getId(int x) {\n        return Arrays.binarySearch(a, x) + 1;\n    }\n}\n"}