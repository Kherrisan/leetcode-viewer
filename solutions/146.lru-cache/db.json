{"java":"\nclass LRUCache {\n\n    class Node {\n        int value;\n        int key;\n        Node prev;\n        Node succ;\n\n        Node(int key, int value) {\n            this.key = key;\n            this.value = value;\n        }\n    }\n\n    Map<Integer, Node> map = new HashMap();\n    Node head;\n    Node tail;\n    int capacity;\n    int size = 0;\n\n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n    }\n\n    void delete(Node n) {\n        if (n.prev != null) {\n            //n不是head\n            n.prev.succ = n.succ;\n        } else {\n            head = n.succ;\n        }\n        if (n.succ != null) {\n            //n 不是 tail\n            n.succ.prev = n.prev;\n        } else {\n            tail = n.prev;\n        }\n        n.succ = n.prev = null;\n    }\n\n    void append(Node n) {\n        if (head == null) {\n            head = tail = n;\n        } else {\n            tail.succ = n;\n            n.prev = tail;\n            tail = n;\n        }\n    }\n\n    public int get(int key) {\n        System.out.println(key);\n        if (!map.containsKey(key)) {\n            return -1;\n        }\n        Node n = map.get(key);\n        delete(n);\n        append(n);\n        return n.value;\n    }\n\n    public void put(int key, int value) {\n        if (!map.containsKey(key)) {\n            size++;\n        if (size > capacity) {\n            size--;\n            map.remove(head.key);\n            delete(head);\n        }\n            Node n = new Node(key, value);\n            map.put(key, n);\n            append(n);\n        } else {\n            Node n = map.get(key);\n            n.value = value;\n            delete(n);\n            append(n);\n        }\n    }\n}\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache obj = new LRUCache(capacity);\n * int param_1 = obj.get(key);\n * obj.put(key,value);\n */"}