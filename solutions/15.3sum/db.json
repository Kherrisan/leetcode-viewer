{"java":"class Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        int n = nums.length;\n        Arrays.sort(nums);\n        List<List<Integer>> ans = new ArrayList<List<Integer>>();\n        // 枚举 a\n        for (int first = 0; first < n; ++first) {\n            // 需要和上一次枚举的数不相同\n            if (first > 0 && nums[first] == nums[first - 1]) {\n                continue;\n            }\n            // c 对应的指针初始指向数组的最右端\n            int third = n - 1;\n            int target = -nums[first];\n            // 枚举 b\n            for (int second = first + 1; second < n; ++second) {\n                // 需要和上一次枚举的数不相同\n                if (second > first + 1 && nums[second] == nums[second - 1]) {\n                    continue;\n                }\n                // 需要保证 b 的指针在 c 的指针的左侧\n                while (second < third && nums[second] + nums[third] > target) {\n                    --third;\n                }\n                // 如果指针重合，随着 b 后续的增加\n                // 就不会有满足 a+b+c=0 并且 b<c 的 c 了，可以退出循环\n                if (second == third) {\n                    break;\n                }\n                if (nums[second] + nums[third] == target) {\n                    List<Integer> list = new ArrayList<Integer>();\n                    list.add(nums[first]);\n                    list.add(nums[second]);\n                    list.add(nums[third]);\n                    ans.add(list);\n                }\n            }\n        }\n        return ans;\n    }\n}"}