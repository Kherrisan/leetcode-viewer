{"java":"class Solution {\n    public TreeNode recoverFromPreorder(String S) {\n        Deque<TreeNode> path = new LinkedList<TreeNode>();\n        int pos = 0;\n        while (pos < S.length()) {\n            int level = 0;\n            while (S.charAt(pos) == '-') {\n                ++level;\n                ++pos;\n            }\n            int value = 0;\n            while (pos < S.length() && Character.isDigit(S.charAt(pos))) {\n                value = value * 10 + (S.charAt(pos) - '0');\n                ++pos;\n            }\n            TreeNode node = new TreeNode(value);\n            if (level == path.size()) {\n                if (!path.isEmpty()) {\n                    path.peek().left = node;\n                }\n            }\n            else {\n                while (level != path.size()) {\n                    path.pop();\n                }\n                path.peek().right = node;\n            }\n            path.push(node);\n        }\n        while (path.size() > 1) {\n            path.pop();\n        }\n        return path.peek();\n    }\n}\n"}