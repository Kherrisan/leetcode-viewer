{"java":"class Solution {\n    private static final int UNCOLORED = 0;\n    private static final int RED = 1;\n    private static final int GREEN = 2;\n    private int[] color;\n    private boolean valid;\n \n\n    public boolean isBipartite(int[][] graph) {\n        int n = graph.length;\n        valid = true;\n        color = new int[n];\n        Arrays.fill(color, UNCOLORED);\n        for (int i = 0; i < n && valid; ++i) {\n            if (color[i] == UNCOLORED) {\n                dfs(i, RED, graph);\n            }\n        }\n        return valid;\n    }\n\n    public void dfs(int node, int c, int[][] graph) {\n        color[node] = c;\n        int cNei = c == RED ? GREEN : RED;\n        for (int neighbor : graph[node]) {\n            if (color[neighbor] == UNCOLORED) {\n                dfs(neighbor, cNei, graph);\n                if (!valid) {\n                    return;\n                }\n            } else if (color[neighbor] != cNei) {\n                valid = false;\n                return;\n            }\n        }\n    }\n\n}"}