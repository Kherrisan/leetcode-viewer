{"java":"class Solution {\n    Random random=new Random();\n    public int findKthLargest(int[] nums, int k) {\n        return select(nums,0,nums.length-1,nums.length-k);\n    }\n\n    int select(int[] nums,int left,int right,int index){\n        int k=randomPartition(nums,left,right);\n        if(k==index){\n            return nums[k];\n        }else if(index<k){\n            return select(nums,left,k-1,index);\n        }else{\n            return select(nums,k+1,right,index);\n        }\n    }\n\n    int randomPartition(int[] nums,int left,int right){\n        if (left == right)\n            return left;\n        int i=random.nextInt(right-left+1)+left;\n        swap(nums,left,i);\n        return partition(nums,left,right);\n    }\n\n    int partition(int[] nums,int left,int right){\n        int v=nums[left];\n        int i=left,j=right+1;\n        while(true){\n            while(v>nums[++i])if(i==right)break;\n            while(v<nums[--j]);\n            if(i>=j){\n                break;\n            }\n            swap(nums,i,j);\n        }\n        swap(nums,left,j);\n        return j;\n    }\n\n    void swap(int[] nums,int l,int r){\n        int t=nums[l];\n        nums[l]=nums[r];\n        nums[r]=t;\n    }\n}"}